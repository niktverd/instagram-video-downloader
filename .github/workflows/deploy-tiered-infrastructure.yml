name: Deploy Tiered Infrastructure

on:
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deploy mode'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - tier1-only
          - tier2-only
          - tier3-only

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-central2
  SERVICE_PREFIX: instagram-downloader
  PUSH_ENDPOINT: /api/cloud-run/run-scenario

jobs:
  build-and-deploy:
    name: Build and Deploy All Tiers
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'
      - name: Build and Push Image
        id: build_image
        run: |
          IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_PREFIX }}:${GITHUB_SHA}"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          docker build -t $IMAGE_TAG .
          gcloud auth configure-docker
          docker push $IMAGE_TAG
      - name: Deploy Tier 1 (Small)
        if: ${{ github.event.inputs.deploy_mode == 'all' || github.event.inputs.deploy_mode == 'tier1-only' }}
        id: deploy_tier1
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier1"
          IMAGE_TAG="$IMAGE_TAG"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 1 \
            --update-secrets FIREBASE_CONFIG=FIREBASE_CONFIG:latest,FIREBASE_CONFIG_REELS_CREATOR=FIREBASE_CONFIG_REELS_CREATOR:latest,POSTGRES_CONFIG=POSTGRES_CONFIG:latest,MAIN_BACKEND_ENDPOINT=MAIN_BACKEND_ENDPOINT:latest \
            --set-env-vars APP_ENV=cloud-run,PUBSUB_TOPIC_NAME=$TOPIC_NAME,ENABLE_STDERR=false,ENABLE_PROGRESS=false,ENABLE_START=false,ENABLE_DOWNLOAD_VIDEO=false,ENABLE_RUN_SCENARIO_VIDEO=false,ENABLE_PUBSUB=true \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "TIER1_URL=$URL" >> $GITHUB_ENV
          echo "Tier1 URL: $URL"
      - name: Deploy Tier 2 (Medium)
        if: ${{ github.event.inputs.deploy_mode == 'all' || github.event.inputs.deploy_mode == 'tier2-only' }}
        id: deploy_tier2
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier2"
          IMAGE_TAG="$IMAGE_TAG"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 2Gi \
            --cpu 1 \
            --max-instances 1 \
            --update-secrets FIREBASE_CONFIG=FIREBASE_CONFIG:latest,FIREBASE_CONFIG_REELS_CREATOR=FIREBASE_CONFIG_REELS_CREATOR:latest,POSTGRES_CONFIG=POSTGRES_CONFIG:latest,MAIN_BACKEND_ENDPOINT=MAIN_BACKEND_ENDPOINT:latest \
            --set-env-vars APP_ENV=cloud-run,PUBSUB_TOPIC_NAME=$TOPIC_NAME,ENABLE_STDERR=false,ENABLE_PROGRESS=false,ENABLE_START=false,ENABLE_DOWNLOAD_VIDEO=false,ENABLE_RUN_SCENARIO_VIDEO=false,ENABLE_PUBSUB=true \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "TIER2_URL=$URL" >> $GITHUB_ENV
          echo "Tier2 URL: $URL"
      - name: Deploy Tier 3 (Large)
        if: ${{ github.event.inputs.deploy_mode == 'all' || github.event.inputs.deploy_mode == 'tier3-only' }}
        id: deploy_tier3
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier3"
          IMAGE_TAG="$IMAGE_TAG"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 4Gi \
            --cpu 2 \
            --max-instances 1 \
            --update-secrets FIREBASE_CONFIG=FIREBASE_CONFIG:latest,FIREBASE_CONFIG_REELS_CREATOR=FIREBASE_CONFIG_REELS_CREATOR:latest,POSTGRES_CONFIG=POSTGRES_CONFIG:latest,MAIN_BACKEND_ENDPOINT=MAIN_BACKEND_ENDPOINT:latest \
            --set-env-vars APP_ENV=cloud-run,PUBSUB_TOPIC_NAME=$TOPIC_NAME,ENABLE_STDERR=false,ENABLE_PROGRESS=false,ENABLE_START=false,ENABLE_DOWNLOAD_VIDEO=false,ENABLE_RUN_SCENARIO_VIDEO=false,ENABLE_PUBSUB=true \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "TIER3_URL=$URL" >> $GITHUB_ENV
          echo "Tier3 URL: $URL"

  setup-pubsub:
    name: Setup Pub/Sub Queues
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Create Pub/Sub Topics
        run: |
          gcloud pubsub topics create pubsub-tier1 || true
          gcloud pubsub topics create pubsub-tier2 || true
          gcloud pubsub topics create pubsub-tier3 || true
          gcloud pubsub topics create pubsub-dead || true
      - name: Create Pub/Sub Subscriptions
        run: |
          # Tier1 push
          gcloud pubsub subscriptions create pubsub-tier1-push \
            --topic=pubsub-tier1 \
            --push-endpoint="${{ env.CLOUD_RUN_URL }}${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=300 \
            --dead-letter-topic=pubsub-tier2 \
            --max-delivery-attempts=3 || true
          # Tier2 push
          gcloud pubsub subscriptions create pubsub-tier2-push \
            --topic=pubsub-tier2 \
            --push-endpoint="${{ env.CLOUD_RUN_URL }}${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=600 \
            --dead-letter-topic=pubsub-tier3 \
            --max-delivery-attempts=3 || true
          # Tier3 push
          gcloud pubsub subscriptions create pubsub-tier3-push \
            --topic=pubsub-tier3 \
            --push-endpoint="${{ env.CLOUD_RUN_URL }}${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=1000 \
            --dead-letter-topic=pubsub-dead \
            --max-delivery-attempts=3 || true
          # Dead-letter (pull)
          gcloud pubsub subscriptions create pubsub-dead-pull \
            --topic=pubsub-dead \
            --ack-deadline=600 \
            --message-retention-duration=7d || true
      - name: Log Pub/Sub Setup
        run: |
          echo "Pub/Sub topics and subscriptions created."
