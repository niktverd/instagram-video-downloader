name: Deploy Tiered Infrastructure

on:
  workflow_dispatch:
    inputs:
      deploy_mode:
        description: 'Deploy mode'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - tier1-only
          - tier2-only
          - tier3-only

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: europe-central2
  SERVICE_PREFIX: instagram-downloader
  PUSH_ENDPOINT: /api/cloud-run/run-scenario

jobs:
  build-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image.outputs.tag }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          install_components: 'beta'
      - name: Build and Push Image
        id: image
        run: |
          IMAGE_TAG="gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_PREFIX }}:${GITHUB_SHA}"
          docker build -t $IMAGE_TAG .
          gcloud auth configure-docker
          docker push $IMAGE_TAG
          echo "tag=$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-tier1:
    name: Deploy Tier 1 (Small)
    runs-on: ubuntu-latest
    needs: build-image
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Deploy to Cloud Run (Tier 1)
        id: deploy
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier1"
          IMAGE_TAG="${{ needs.build-image.outputs.image_tag }}"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 1Gi \
            --cpu 1 \
            --max-instances 100 \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
      - name: Log Service URL
        run: "echo 'Tier1 URL: ${{ steps.deploy.outputs.url }}'"

  deploy-tier2:
    name: Deploy Tier 2 (Medium)
    runs-on: ubuntu-latest
    needs: deploy-tier1
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Deploy to Cloud Run (Tier 2)
        id: deploy
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier2"
          IMAGE_TAG="${{ needs.build-image.outputs.image_tag }}"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 2Gi \
            --cpu 1 \
            --max-instances 10 \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
      - name: Log Service URL
        run: "echo 'Tier2 URL: ${{ steps.deploy.outputs.url }}'"

  deploy-tier3:
    name: Deploy Tier 3 (Large)
    runs-on: ubuntu-latest
    needs: deploy-tier2
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - name: Deploy to Cloud Run (Tier 3)
        id: deploy
        run: |
          SERVICE_NAME="${{ env.SERVICE_PREFIX }}-tier3"
          IMAGE_TAG="${{ needs.build-image.outputs.image_tag }}"
          echo "Deploying $SERVICE_NAME with $IMAGE_TAG"
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_TAG \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory 4Gi \
            --cpu 2 \
            --max-instances 2 \
            --allow-unauthenticated
          URL=$(gcloud run services describe $SERVICE_NAME --region ${{ env.REGION }} --format 'value(status.url)')
          echo "url=$URL" >> $GITHUB_OUTPUT
      - name: Log Service URL
        run: "echo 'Tier3 URL: ${{ steps.deploy.outputs.url }}'"

  setup-pubsub:
    name: Setup Pub/Sub Queues
    runs-on: ubuntu-latest
    needs: [deploy-tier1, deploy-tier2, deploy-tier3]
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'
      - name: Create Pub/Sub Topics
        run: |
          gcloud pubsub topics create pubsub-tier1 || true
          gcloud pubsub topics create pubsub-tier2 || true
          gcloud pubsub topics create pubsub-tier3 || true
          gcloud pubsub topics create pubsub-dead || true
      - name: Create Pub/Sub Subscriptions
        run: |
          # Tier1 push
          gcloud pubsub subscriptions create pubsub-tier1-push \
            --topic=pubsub-tier1 \
            --push-endpoint="${{ needs.deploy-tier1.outputs.url }}/${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=300 \
            --dead-letter-topic=pubsub-tier2 \
            --max-delivery-attempts=3 || true
          # Tier2 push
          gcloud pubsub subscriptions create pubsub-tier2-push \
            --topic=pubsub-tier2 \
            --push-endpoint="${{ needs.deploy-tier2.outputs.url }}/${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=600 \
            --dead-letter-topic=pubsub-tier3 \
            --max-delivery-attempts=3 || true
          # Tier3 push
          gcloud pubsub subscriptions create pubsub-tier3-push \
            --topic=pubsub-tier3 \
            --push-endpoint="${{ needs.deploy-tier3.outputs.url }}/${{ env.PUSH_ENDPOINT }}" \
            --ack-deadline=1000 \
            --dead-letter-topic=pubsub-dead \
            --max-delivery-attempts=3 || true
          # Dead-letter (pull)
          gcloud pubsub subscriptions create pubsub-dead-pull \
            --topic=pubsub-dead \
            --ack-deadline=600 \
            --message-retention-duration=7d || true
      - name: Log Pub/Sub Setup
        run: |
          echo "Pub/Sub topics and subscriptions created."
