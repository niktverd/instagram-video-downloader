name: Instagram Video Downloader Cloud Run

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main'
        type: string

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: instagram-video-downloader
  REGION: europe-central2
  ACTIONS_RUNNER_DEBUG: true
  ACTIONS_STEP_DEBUG: true
  # Pub/Sub configuration
  TOPIC_NAME: instagram-video-events
  PUSH_ENDPOINT: /api/cloud-run/run-scenario

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    # Only run on merged PRs or manual dispatch
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build docker image
        run: docker build -t $SERVICE_NAME:$GITHUB_SHA .

  deploy:
    name: Deploy
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      # Authenticate with Google Cloud
      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      # Setup gcloud CLI/SDK
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Verify gcloud configuration
      - name: Verify gcloud config
        run: |
          gcloud config list
          gcloud projects describe $PROJECT_ID
          gcloud auth list

      - name: Set branch name for service
        run: |
          # Extract branch name and make it URL-friendly for service name
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          CLEAN_BRANCH_NAME=$(echo $BRANCH_NAME | tr '/' '-' | tr '_' '-' | tr '[:upper:]' '[:lower:]')
          if [ "$CLEAN_BRANCH_NAME" = "main" ] || [ "$CLEAN_BRANCH_NAME" = "master" ]; then
            # Use the regular service name for main/master
            echo "DEPLOY_SERVICE_NAME=$SERVICE_NAME" >> $GITHUB_ENV
          else
            # Append branch name for other branches
            # Limit to 49 chars to avoid exceeding GCP service name length limits
            SERVICE_PREFIX=$(echo $SERVICE_NAME | cut -c 1-30)
            BRANCH_SUFFIX=$(echo $CLEAN_BRANCH_NAME | cut -c 1-18)
            echo "DEPLOY_SERVICE_NAME=${SERVICE_PREFIX}-${BRANCH_SUFFIX}" >> $GITHUB_ENV
          fi

      - name: Authorize Docker push
        run: gcloud auth configure-docker

      - name: Build and tag the docker image
        run: docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA .

      - name: Push the image to the Google Container Registry (GCR)
        run: docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA

      # First deployment
      - name: Check if service exists
        id: check_service
        run: |
          set +e
          gcloud run services describe $SERVICE_NAME --region $REGION > /dev/null 2>&1
          echo "service_exists=$?" >> $GITHUB_OUTPUT

      - name: Deploy service (first time)
        if: steps.check_service.outputs.service_exists != '0'
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --memory 2Gi \
            --cpu 1 \
            --timeout 1000 \
            --concurrency 1 \
            --max-instances=10 \
            --update-secrets FIREBASE_CONFIG=FIREBASE_CONFIG:latest,FIREBASE_CONFIG_REELS_CREATOR=FIREBASE_CONFIG_REELS_CREATOR:latest,POSTGRES_CONFIG=POSTGRES_CONFIG:latest \
            --set-env-vars APP_ENV=cloud-run,PUBSUB_TOPIC_NAME=$TOPIC_NAME,ENABLE_STDERR=false,ENABLE_PROGRESS=false,ENABLE_START=false,ENABLE_DOWNLOAD_VIDEO=false,ENABLE_RUN_SCENARIO_VIDEO=false,ENABLE_PUBSUB=true \
            --allow-unauthenticated

      - name: Deploy service (update)
        if: steps.check_service.outputs.service_exists == '0'
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA \
            --platform managed \
            --region $REGION \
            --memory 2Gi \
            --cpu 1 \
            --timeout 1000 \
            --concurrency 1 \
            --max-instances=10 \
            --update-secrets FIREBASE_CONFIG=FIREBASE_CONFIG:latest,FIREBASE_CONFIG_REELS_CREATOR=FIREBASE_CONFIG_REELS_CREATOR:latest,POSTGRES_CONFIG=POSTGRES_CONFIG:latest \
            --set-env-vars APP_ENV=cloud-run,PUBSUB_TOPIC_NAME=$TOPIC_NAME,ENABLE_STDERR=false,ENABLE_PROGRESS=false,ENABLE_START=false,ENABLE_DOWNLOAD_VIDEO=false,ENABLE_RUN_SCENARIO_VIDEO=false,ENABLE_PUBSUB=true \
            --allow-unauthenticated

      # Pub/Sub Configuration Steps
      # Get Cloud Run service URL
      - name: Get service URL
        run: |
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region $REGION --format='value(status.url)')
          echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

      # Create or update Pub/Sub topic
      - name: Create/Update Pub/Sub topic
        run: |
          # Check if topic exists, create if not
          if ! gcloud pubsub topics describe $TOPIC_NAME >/dev/null 2>&1; then
            echo "Creating topic $TOPIC_NAME"
            gcloud pubsub topics create $TOPIC_NAME
          else
            echo "Topic $TOPIC_NAME already exists"
          fi

      # Create or update Pub/Sub subscription with push endpoint
      - name: Create/Update Pub/Sub subscription
        run: |
          SUBSCRIPTION_NAME="${TOPIC_NAME}-push-subscription"
          PUSH_ENDPOINT="${SERVICE_URL}${PUSH_ENDPOINT}"
          DEAD_LETTER_TOPIC="projects/media-automation-6aff2/topics/dead_scenario"

          # Check if subscription exists
          if gcloud pubsub subscriptions describe $SUBSCRIPTION_NAME >/dev/null 2>&1; then
            echo "Updating subscription $SUBSCRIPTION_NAME"
            gcloud pubsub subscriptions delete $SUBSCRIPTION_NAME
          fi

          echo "Creating subscription $SUBSCRIPTION_NAME with push endpoint $PUSH_ENDPOINT"
          gcloud pubsub subscriptions create $SUBSCRIPTION_NAME \
            --topic $TOPIC_NAME \
            --push-endpoint=$PUSH_ENDPOINT \
            --ack-deadline=600 \
            --expiration-period=never \
            --message-retention-duration=24h \
            --dead-letter-topic=$DEAD_LETTER_TOPIC \
            --max-delivery-attempts=15 \
            --min-retry-delay=540s \
            --max-retry-delay=600s \

      # # Add step for monitoring memory usage
      # - name: Monitor Memory Usage
      #   run: |
      #     echo "Setting up memory monitoring for $DEPLOY_SERVICE_NAME"
      #     gcloud run services update $DEPLOY_SERVICE_NAME \
      #       --region $REGION \
      #       --set-env-vars ENABLE_MEMORY_MONITORING=true
